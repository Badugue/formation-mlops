
## Entraînement distribué

- Avec notre configuration, nous pouvons entraîner des modèles [**un par un**]{.orange} et enregistrer toutes les informations pertinentes sur le serveur MLflow Tracking.
- Et si nous voulions entraîner [**plusieurs modèles en même temps**]{.orange}, par exemple pour optimiser les hyperparamètres ?

## Automatisation du workflow

- [**Principes généraux**]{.orange} :
  - Définir des workflows où chaque étape du processus est un [**conteneur**]{.blue2} (reproductibilité).
  - Modéliser les workflows à plusieurs étapes comme une [**séquence**]{.blue2} de tâches ou comme un [**graphe acyclique orienté**]{.blue2}.
  - Cela permet d'[**exécuter facilement en parallèle des tâches intensives**]{.blue2} en calcul pour l'entraînement du modèle ou le traitement des données.

## Argo workflows

- Un moteur de [**workflow**]{.orange} populaire pour orchestrer des tâches parallèles sur `Kubernetes`.
  - [**Open-source**]{.blue2}
  - [**Container-native**]{.blue2}
  - Disponible sur le [**SSP Cloud**]{.orange}

. . .

![](../img/argo-logo.png){fig-align="center" height=200}

## Bonjour le monde

```yaml
apiVersion: argoproj.io/v1alpha1
kind: Workflow                  # nouveau type de spécification k8s
metadata:
  generateName: hello-world-    # nom de la spécification du workflow
spec:
  entrypoint: whalesay          # invoque le modèle whalesay
  templates:
    - name: whalesay            # nom du modèle
      container:
        image: docker/whalesay
        command: [ cowsay ]
        args: [ "bonjour le monde" ]
```

## Que se passe-t-il ?

. . .

![](../img/argo-0.png){fig-align="center" height=500}

## Que se passe-t-il ?

![](../img/argo-1a.png){fig-align="center" height=500}

## Que se passe-t-il ?

![](../img/argo-2a.png){fig-align="center" height=500}

## Paramètres

- Les modèles peuvent prendre des [**paramètres d'entrée**]{.orange}

. . .

```yaml
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: hello-world-parameters-
spec:
  entrypoint: whalesay
  arguments:
    parameters:
    - name: message
      value: bonjour le monde

  templates:
  - name: whalesay
    inputs:
      parameters:
      - name: message       # déclaration du paramètre
    container:
      image: docker/whalesay
      command: [cowsay]
      args: ["{{inputs.parameters.message}}"]
```

## Workflows à plusieurs étapes

- Les [**workflows à plusieurs étapes**]{.orange} peuvent être spécifiés (`steps` ou `dag`)

. . .

```yaml
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: steps-
spec:
  entrypoint: hello-hello-hello

  # Cette spécification contient deux modèles : hello-hello-hello et whalesay
  templates:
  - name: hello-hello-hello
    # Au lieu d'exécuter uniquement un conteneur
    # Ce modèle a une séquence d'étapes
    steps:
    - - name: hello1            # hello1 est exécuté avant les étapes suivantes
        template: whalesay
    - - name: hello2a           # double tiret => exécuté après l'étape précédente
        template: whalesay
      - name: hello2b           # tiret simple => exécuté en parallèle avec l'étape précédente
        template: whalesay
  - name: whalesay              # nom du modèle
    container:
      image: docker/whalesay
      command: [ cowsay ]
      args: [ "bonjour le monde" ]
```

## Que se passe-t-il ?

. . .

![](../img/argo-0.png){fig-align="center" height=500}

## Que se passe-t-il ?

![](../img/argo-1b.png){fig-align="center" height=500}

## Que se passe-t-il ?

![](../img/argo-2b.png){fig-align="center" height=500}

## Que se passe-t-il ?

![](../img/argo-1b.png){fig-align="center" height=500}

## Que se passe-t-il ?

![](../img/argo-3b.png){fig-align="center" height=500}

## Autres applications

- Workflow pour [**tester**]{.orange} des modèles enregistrés, ou des modèles poussés en pré-production / production.
- Les workflows peuvent être [**déclenchés**]{.orange} automatiquement (via Argo Events, par exemple).
- Workflows d'[**entraînement continue**]{.orange}.
- Pipelines de *machine learning* [**distribués**]{.orange} en général (téléchargement de données, traitement, etc.).

## Autres applications

. . .

![](../img/pokemon_workflow.png){fig-align="center" height=450}

## Notes

- [**Python SDK**]{.orange} pour Argo Workflows
- Pipelines Kubeflow
- [**Couler**]{.orange} : interface unifiée pour la construction et la gestion de workflows sur différents moteurs de workflows
- Autres outils d'orchestration natifs de Python : [**Apache Airflow**]{.orange}, [**Metaflow**]{.orange}, [**Prefect**]{.orange}
