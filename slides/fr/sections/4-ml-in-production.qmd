
## Cycle de vie d'un modèle ML en production

![](../img/mlops.png){fig-align="center"}

## Le défi de la responsabilité 
::: {.nonincremental}

- Le cycle de vie d'un modèle ML est [**complexe**]{.orange}
- Plusieurs [**parties prenantes**]{.orange} impliquées :
    - [**Data scientists**]{.blue2}
    - [**IT/DevOps**]{.blue2}
    - [**Equipes métiers**]{.blue2}

- [**Expertises**]{.orange} et [**vocabulaire**]{.orange} différents entre ces parties prenantes

➡️ [**Communication**]{.orange} essentielle entre les équipes pour [**contrôler**]{.orange} le modèle en production
:::

## Pourquoi surveiller un modèle en production ?
::: {.nonincremental}

- Détecter des [**données biaisées**]{.orange} : adéquation entre les données de production et données d'entrainement
- Anticiper une [**instabilité du modèle**]{.orange} : performance du modèle stable au fil du temps
- [**Améliorer**]{.orange} de manière continue le modèle : ré-entrainements réguliers

⚠️ Le mot [**surveillance**]{.red2} d'une application/modèle a des définitions différentes en fonction de l'équipe où l'on se trouve.
:::

## Surveillance selon l'informaticien
::: {.nonincremental}

- Surveiller une application est partie intégrante de l'approche [**DevOps**]{.orange}
- Contrôle [**technique**]{.orange} du modèle :
    - Latence
    - Mémoire
    - Utilisation disque
    - ...
:::

## Surveillance selon le data scientist
::: {.nonincremental}

- Surveiller un modèle ML est partie intégrante de l'approche [**MLOps**]{.orange}
- Contrôle [**méthodologique**]{.orange} du modèle
- Performance en [**temps réel**]{.orange} du modèle souvent impossible, utilisation de proxys :
    - [**Data drift**]{.blue2} : la distribution des données d'entrée change dans le temps
    - [**Concept drift**]{.blue2} : la relation modélisée change dans le temps
:::

## Comment surveiller un modèle en production ?
::: {.nonincremental}

- Intégration de [**logs**]{.orange} dans l'API
- Récupération et mise en forme des logs
- Suivi de [**métriques**]{.orange} de ML
- Mise en place d'un système d'[**alertes**]{.orange}
:::


## Application 4 {.scrollable}

{{< include applications/_application4a.qmd >}}

## Observabilité du modèle grâce à un tableau de bord

- Les logs de l'API contiennent maintenant des [**informations métier**]{.orange}
- Pour le [**traitement/stockage**]{.orange} des logs : pipeline [**ETL**]{.blue2}
- Pour analyser le comportement du moteur de codification : création d'un [**tableau de bord**]{.orange}
- Solutions multiples pour le [**tableau de bord**]{.orange} : [[**Grafana**]{.blue2}](https://grafana.com/), [[**Quarto Dashboards**]{.blue2}](https://quarto.org/docs/dashboards/), [[**Apache Superset**]{.blue2}](https://superset.apache.org/), ...

## Un exemple de stack

- [**ETL**]{.orange} sous forme d'un cron job qui parse les logs et les stocke au format `.parquet`
- Utilisation de [[**DuckDB**]{.orange}](https://duckdb.org/) pour requêter les fichiers `.parquet`
- ... et créer les composants d'un [**Quarto Dashboards**]{.orange}
- Le tableau de bord est un site statique à actualiser tous les jours par exemple

## Un exemple de stack

![](../img/dashboard-fr.png){fig-align="center"}

