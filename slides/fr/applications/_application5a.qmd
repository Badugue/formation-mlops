::: {.nonincremental}
:::: {.callout-tip collapse="true" icon=false}
## Partie 1 : Requêter votre modèle déployé

1. Créez un fichier `predict-api.py`. Ce script doit : 
    - Lire le fichier parquet disponible à l'adresse suivante :

    ```shell
    https://minio.lab.sspcloud.fr/projet-formation/diffusion/mlops/data/data_to_classify.parquet
    ``` 

    - Effectuer des requêtes à votre API pour chaque libellé présent dans le fichier parquet.
    - Afficher le résultats des prédictions

<details> 
<summary> 
    <font size=\"3\" color=\"darkgreen\"><b>Cliquez pour voir le contenu du script </b></font> 
</summary>

```python
import pandas as pd
import requests


# Fonction pour effectuer la requête à l'API
def make_prediction(api_url: str, description: str):
    params = {"description": description, "nb_echoes_max": 2}
    response = requests.get(api_url, params=params)
    return response.json()


# URL des données
data_path = "https://minio.lab.sspcloud.fr/projet-formation/diffusion/mlops/data/data_to_classify.parquet"

# Charge le fichier Parquet dans un DataFrame pandas
df = pd.read_parquet(data_path)

# Votre API URL
api_url = "<your_firstname>-<your_lastname>-api.lab.sspcloud.fr/predict"

# Effectue les requêtes
responses = df["text"].apply(lambda x: make_prediction(api_url, x))

# Affiche le DataFrame avec les résultats des prédictions
print(pd.merge(df, pd.json_normalize(responses),
               left_index=True,
               right_index=True))

```
</details>

2. Executez votre script `predict-api.py`.

<details> 
<summary> 
    <font size=\"3\" color=\"darkgreen\"><b>Cliquez pour voir la commande </b></font> 
</summary>

```shell
python formation-mlops/src/predict-api.py
```
</details>

3. Dans ArgoCD, ouvrez votre application puis cliquez sur votre pod qui doit commencer par  `"codification-api-..."`. Observez les logs.

4. Quelles informations détenez-vous ? Est-ce suffisant ?

::::
:::
