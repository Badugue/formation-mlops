:::{.nonincremental}
:::: {.callout-tip collapse="true" icon=false}
## Deploying a machine-learning model as an API

1. We constructed a very simplistic Rest API using FastAPI. All underlying files are in the `app` folder. Check them.
2. Open the `Dockerfile` to see how the image is built. The image is automatically rebuilt and published via Github Actions, if interested have a look to `.github/workflows/build_image.yml`.
3. Open the file `kubernetes/deployment.yml` and modify the highlighted lines accordingly:

```{.yml code-line-numbers="7,9,11"}
containers:
- name: api
    image: inseefrlab/formation-mlops-api:main
    imagePullPolicy: Always
    env:
    - name: MLFLOW_TRACKING_URI
        value: https://user-<namespace>-<pod_id>.user.lab.sspcloud.fr
    - name: MLFLOW_MODEL_NAME
        value: fasttext
    - name: MLFLOW_MODEL_VERSION
        value: "1"
```

4. Open the file `kubernetes/ingress.yml` and modify (two times) the URL of the API endpoint to be of the form `<your_firstname>-<your_lastname>-api.lab.sspcloud.fr`
5. Apply the three `Kubernetes` contracts contained in the `kubernetes/` folder in a terminal to deploy the API

```shell
kubectl apply -f formation-mlops/kubernetes/
```

6. Reach your API using the URL defined in your `ingress.yml` file
7. Display the documentation of your API by adding `/docs` to your URL
8. Try your API out!
9. Re-run a new model and deploy this new model in your API

<details>
<summary>
    <font size=\"3\" color=\"darkgreen\"><b>Click to see the steps </b></font>
</summary>

1. Run a model
2. Register the model
3. Adjust your `MLFLOW_MODEL_NAME` or `MLFLOW_MODEL_VERSION` (if you didn't modify the model name) environment variable in the `deployment.yml` file
4. Apply the new `Kubernetes` contracts to update the API

```shell
kubectl apply -f formation-mlops/kubernetes/
```

5. Refresh your API, and verify on the home page that it is now based on the new version of the model

</details>

::::

:::
