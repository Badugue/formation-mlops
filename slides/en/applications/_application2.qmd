
:::{.nonincremental}
:::: {.callout-tip collapse="true" icon=false}
## Part 1: Using a custom model

1. All scripts related to our custom model are stored in the `src` folder. Check them out. In particular, the `train.py` script is responsible for training the model. What are the main differences compared to application 1?
2. Why can we say that the `MLflow` model integrates *preprocessing*?
::::
:::


## Application 2 {.scrollable}

:::{.nonincremental}
::::{.callout-tip collapse="true" icon=false}
## Part 2 : From notebooks to a package-like project

1. The `train.py` script is also responsible for *logging* experiments in `MLFlow`. Note how the parameters of each experiment are passed to the training function when the script is called.

2. To make the model training procedure more reproducible, `MLFlow` provides the `mlflow run` command. The `MLproject` file specifies the command and parameters that will be passed to it. Inspect this file.

3. Run a model training using `MLFlow`. To do this, open a terminal ({{< iconify ph list-bold >}} `-> Terminal -> New Terminal`) and execute the following command:

   ```sh
   export MLFLOW_EXPERIMENT_NAME="nace-prediction"
   mlflow run ~/work/formation-mlops/ --env-manager=local \
       -P remote_server_uri=$MLFLOW_TRACKING_URI \
       -P experiment_name=$MLFLOW_EXPERIMENT_NAME
   ```

4. In the MLflow interface, examine the results of your previous run:

   * `Experiments -> nace-prediction -> <run_name>`

5. You trained the model with certain default parameters. In the `MLproject` file, check the available parameters. Retrain a model with different parameters (e.g., `dim = 25`).

<details> 
<summary> 
    <font size=\"3\" color=\"darkgreen\"><b>Click to see the command </b></font>
</summary>

```sh
mlflow run ~/work/formation-mlops/ --env-manager=local \
    -P remote_server_uri=$MLFLOW_TRACKING_URI \
    -P experiment_name=$MLFLOW_EXPERIMENT_NAME \
    -P dim=25
```

</details>


6. In `MLflow`, compare the 2 models by plotting the accuracy against one parameter you have changed (i.e. `dim`)
    + `Select the 2 runs -> Compare -> Scatter Plot -> Select your X and Y axis`

7. Save the model with the best accuracy as `fasttext` to make it easily queryable from `Python`.
::::
:::


## Application 2 {.scrollable}

:::{.nonincremental}
::::{.callout-tip collapse="true" icon=false}
## Part 3: Querying the locally trained model

1. Create a script `predict_mlflow.py` in the `src` folder of the project. This script should:
    a. Load version 1 of the `fasttext` model 
    b. Use the model to predict NACE codes for a given list of activity descriptions (e.g., `["vendeur d'huitres", "boulanger"]`).

ðŸ’¡ Don't forget to read the documentation of the `predict()` function from the custom class (`src/fasttext_wrapper.py`) to understand the expected input format!
    
<details> 
<summary> 
    <font size=\"3\" color=\"darkgreen\"><b>Click to see the script content </b></font>
</summary>

```{.python filename="predict_mlflow.py"}
import mlflow

model_name = "fasttext"
version = 1

model = mlflow.pyfunc.load_model(
    model_uri=f"models:/{model_name}/{version}"
)

list_libs = ["vendeur d'huitres", "boulanger"]

results = model.predict(list_libs, params={"k": 1})
print(results)
```
</details>

3. Run your `predict_mlflow.py` script.

<details> 
<summary> 
    <font size=\"3\" color=\"darkgreen\"><b>Click to see the command </b></font>
    </summary>

```shell
python formation-mlops/src/predict_mlflow.py
```

</details>

4. Ensure that the following two descriptions give the same main prediction: `"COIFFEUR"` et `"coiffeur, & 98789"`.
5. Change the value of the `k` parameter and try to understand how the output structure has changed accordingly.
::::
:::

