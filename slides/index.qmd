---
title: An introduction to MLOps with MLflow
subtitle: |
  [**[Romain Avouac (Insee), Thomas Faria (Insee), Tom Seimandi (Insee)]{.orange}**]{.orange}
# date: 
slide-number: true
footer: |
  An introduction to MLOps with MLflow
# uncomment for French presentations:
# lang: fr-FR
# for blind readers:
slide-tone: false
# for @olevitt:
chalkboard: # press the B key to toggle chalkboard
  theme: whiteboard
# uncomment to use the multiplex mode:
#multiplex: true
format:
  # pick the light mode (onyxia-revealjs) or the dark mode (onyxia-dark-revealjs)
  onyxia-revealjs:
  #onyxia-dark-revealjs:
    incremental: true 
    output-file: index.html
controls: true
css: custom.css
from: markdown+emoji
---

# Introduction

## Who are we ?

- [**Data scientists**]{.orange} at Insee
    - methodological and IT innovation teams
    - support data science projects

- [**Contact us**]{.orange}
  - <romain.avouac@insee.fr>
  - <thomas.faria@insee.fr>
  - <tom.seimandi@insee.fr>

## Context

- Difficulty of transitioning from experiments to [**production-grade**]{.orange} machine learning systems

- Leverage [**best practices**]{.orange} from software engineering
  - Improve [**reproducibility**]{.blue2} of analysis
  - [**Deploy**]{.blue2} applications in a [**scalable**]{.blue2} way

## The DevOps approach

- [**Unify**]{.orange} development (*dev*) and system administration (*ops*)
  - [**shorten**]{.blue2} development time
  - maintain software [**quality**]{.blue2} 

. . .

![](img/devops.png){fig-align="center" height=300}

## The MLOps approach

- Integrate the [**specificities**]{.orange} of machine learning projects
  - [**Experimentation**]{.blue2}
  - [**Continuous improvement**]{.blue2}

. . .

![](img/mlops.png){fig-align="center" height=400}

## MLOps : principles

- [**Reproducibility**]{.orange}

- [**Versioning**]{.orange}

- [**Automation**]{.orange}

- [**Monitoring**]{.orange}

- [**Collaboration**]{.orange}

## Why MLflow ?

- Multiple [**frameworks**]{.orange} implement the MLOps principles

- Pros of `MLflow`
  - [**Open-source**]{.blue2}
  - Covers the whole [**ML lifecycle**]{.blue2}
  - [**Agnostic**]{.blue2} to the ML library used
  - We have [**experience**]{.blue2} with it

## Training platform : the SSP Cloud

- An [**open innovation production-like**]{.orange} environment
  - [**Kubernetes**]{.blue2} cluster
  - S3-compatible [**object storage**]{.blue2}
  - Large computational [**resources**]{.blue2} (including GPUs)

- Based on the [Onyxia](https://github.com/InseeFrLab/onyxia-web) project
  - User-friendly [interface](https://datalab.sspcloud.fr/) to launch data science services
  - A [catalog of services](https://datalab.sspcloud.fr/catalog/ide) which covers the full lifecycle of data science projects

## Outline

:one: Introduction to MLFlow

. . .

:two: Deploying a model as an API

. . .

:three: Distributing the hyperparameter optimization

## Application 0

{{< include applications/_application0.qmd >}}





# Introduction to MLFlow

## Tracking server

- "An [**API**]{.orange} and [**UI**]{.orange} for [**logging**]{.orange} parameters, code versions, metrics, and artifacts"

. . .

![](img/mlflow-tracking.png){fig-align="center" height=400}

## Projects

- "A standard format for [**packaging**]{.orange} reusable data science code"

. . .

![](img/mlflow-projects.png){fig-align="center" height=400}

## Models

- "A convention for [**packaging**]{.orange} machine learning [**models**]{.orange} in multiple [**flavors**]{.orange}"

. . .

![](img/mlflow-models.png){fig-align="center" height=400}

## Model registry

- "A [**centralized model store**]{.orange}, set of APIs, and UI, to [**collaboratively**]{.orange} manage the full lifecycle of an MLflow Model"

. . .

![](img/mlflow-model-registry.png){fig-align="center" height=400}

## Application 1

{{< include applications/_application1.qmd >}}

# A Practical Example: NACE Code Prediction for French Companies

## Context

- [**NACE**]{.orange}
  - European standard classification of productive [**economic activities**]{.blue2}
  - [**Hierarchical structure**]{.blue2} with 4 levels and 615 codes

- At Insee previously handled by an outdated [**rule-based**]{.orange} algorithm

- [**Common problematic**]{.orange} to all National statistical institutes

## Data used {.scrollable}

::: {.panel-tabset}

### Slide 

- A simple use-case with only [**2 variables**]{.orange}:
  - [**Textual description**]{.blue2} of the activity – [text]{.green2}
  - [**True NACE code**]{.blue2} labelised by the rule-based engine – [nace]{.green2} (732 modalities)

- Standard [**preprocessing**]{.orange}:
  - lowercasing
  - punctuation removal
  - number removal
  - stopwords removal
  - stemming
  - ...


### Raw

```{ojs}
viewof table_data = Inputs.table(transpose(data_raw), {
    rows: 22
})
```

### Preprocessed

```{ojs}
viewof table_data_prepro = Inputs.table(transpose(data_prepro), {
    rows: 22
})
```

:::

## MLflow with non standard framework

- easy with a variety of machine learning frameworks (scikit-learn, Keras, Pytorch...) 
- sometimes need our own framework 
- custom class and differences with autolog (describe the code quickly)

```r
# Fill in the spot we created for a plot
output$phonePlot <- renderPlot({
  # Render a barplot
})
```

## {auto-animate=true}

```r
# Fill in the spot we created for a plot
output$phonePlot <- renderPlot({
  # Render a barplot
  barplot(WorldPhones[,input$region]*1000, 
          main=input$region,
          ylab="Number of Telephones",
          xlab="Year")
})
```

## Application 2

{{< include applications/_application2.qmd >}}





# Deploying a model as an API

## Application 3

{{< include applications/_application3.qmd >}}





# Distributing the hyperparameter optimization

## Application 4

{{< include applications/_application4.qmd >}}





# Conclusion

```{python}
#| cache: false
import sys
sys.path.append("../src/")

import pandas as pd
from constants import TEXT_FEATURE
from preprocessor import Preprocessor

preprocessor = Preprocessor()

df = pd.read_parquet("../firm_activity_data.parquet")
df = df.sample(frac=0.001, random_state=0)

df_prepro = preprocessor.clean_text(df, TEXT_FEATURE)

ojs_define(data_raw = df, data_prepro = df_prepro)
```
