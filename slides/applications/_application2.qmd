:::{.nonincremental}
:::: {.callout-tip collapse="true" icon=false}
## Part 1 : From notebook to python scripts

<!-- plutot git le file bash et virer de la slide -->
<!-- MLflow est deja ouvert -->
<!-- parametriser la fonction et utiliser le MLproject -->
<!-- tagging en app1 et virer la part 2 et dÃ©tailler app 3 qui devient 2-->
<!-- 
simplify train et dire de check les diff -->

1. All scripts related to our custom model are stored in the `src` folder. Check them out.
2. Run a training of the model using MLflow. To do so:
    a. Create a `mlflow-run.sh` empty file at the root of the project
    b. Change it permissions by running `chmod 777 mlflow-run.sh` in the terminal
    c. Add the following content to `mlflow-run.sh`:

    ```sh
    # Set MLFLOW_S3_ENDPOINT_URL environment variable
    export MLFLOW_S3_ENDPOINT_URL='https://minio.lab.sspcloud.fr'

    # Set MLFLOW_TRACKING_URI environment variable
    export MLFLOW_TRACKING_URI="https://projet-formation-417155.user.lab.sspcloud.fr"

    # Set MLFLOW_EXPERIMENT_NAME environment variable
    export MLFLOW_EXPERIMENT_NAME="fasttext"

    mlflow run ~/work/formation-mlops/ --env-manager=local \
    -P remote_server_uri=$MLFLOW_TRACKING_URI \
    -P experiment_name=$MLFLOW_EXPERIMENT_NAME

    ```

    d. Execute `./mlflow-run.sh` in the terminal
3. Open the MLflow user interface: 
    + `SSPCloud -> My services -> Open MLflow`
4. Look at the results of your previous run:
    + `Experiments -> fasttext -> <run_name>`
5. In `train.py` change some parameters (i.e. `dim = 25`)
6. Train a new model by executing `./mlflow-run.sh`
7. In MLflow, compare the 2 models by plotting the accuracy against one parameter you have changed (i.e. `dim`)
    + `Select the 2 runs -> Compare -> Scatter Plot -> Select your X and Y axis`
::::
:::

## Application 2 {.scrollable}

:::{.nonincremental}
:::: {.callout-tip collapse="true" icon=false}
## Part 2 : Manual logging
1. Log new parameters by adding these lines of code appropriately:

```python
    mlflow.log_param("TEXT_FEATURE", TEXT_FEATURE)
    mlflow.log_param("Y", Y)
```

2. Log the training dataset used by adding this line of code appropriately:

```python
    "train_data": training_data_path,
```

3. Log a new metric which is simply the accuracy in percentage:

```python
    accuracy_percent = accuracy * 100
```

4. Train a model by executing `./mlflow-run.sh`
5. In MLflow, check that everything has been logged correctly
6. Look at the `training_data.txt` in MLflow

::::
:::

## Application 2 {.scrollable}

:::{.nonincremental}
:::: {.callout-tip collapse="true" icon=false}
## Part 3 : Model delivery with onboarded preprocessing

1. In MLflow, register your last model
2. Open and run the notebook `mlflow-custom-model.ipynb`. Do not forget to change your mlflow tracking URI
3. Once the model loaded, make a prediction with the model. `Hint:` read the documentation of the `predict()` function of the custom class

```python
model.predict(test_data)
```

4. Make sure that the two following descriptions give the same results: `"COIFFEUR"` and `"coiffeur, & 98789"`
5. Change the value of the parameter `k`
::::
:::

<!-- ```python
list_libs = ["COIFFEUR", "coiffeur, & 98789"]

test_data = {
    "query": list_libs,
    "k": 1
}
model.predict(test_data)
``` -->
