:::{.nonincremental}
:::: {.callout-tip collapse="true" icon=false}
## Part 1 : From notebook to python scripts


1. All scripts related to our custom model are stored in the `src` folder. Check them out. Have a look at the `MLproject` file as well.
2. Run a training of the model using MLflow. To do so:

    ```sh
    mlflow run ~/work/formation-mlops/ --env-manager=local \
    -P remote_server_uri=$MLFLOW_TRACKING_URI \
    -P experiment_name="fasttext"
    ```

3. Look at the results of your previous run:
    + `Experiments -> fasttext -> <run_name>`
4. You have trained the model with some default parameters. In `MLproject` check the parameters available. Re-train a model with different parameters (i.e. `dim = 25`).

<details>
<summary>
    <font size=\"3\" color=\"darkgreen\"><b>Click to see the command </b></font>
</summary>

```sh
mlflow run ~/work/formation-mlops/ --env-manager=local \
-P remote_server_uri=$MLFLOW_TRACKING_URI \
-P experiment_name="fasttext"
-P dim=25
```

</details>


5. In MLflow, compare the 2 models by plotting the accuracy against one parameter you have changed (i.e. `dim`)
    + `Select the 2 runs -> Compare -> Scatter Plot -> Select your X and Y axis`
::::
:::


## Application 2 {.scrollable}

:::{.nonincremental}
:::: {.callout-tip collapse="true" icon=false}
## Part 2 : Model delivery with onboarded preprocessing

1. Explore the `src/train.py` file carefully. What are the main differences compare to application 1 ?
2. Why can we say that the MLflow model onboard the preprocessing ?
3. In MLflow, register your last model
4. Open and run the notebook `mlflow-custom-model.ipynb` which loads your model from the model store.
5. Read the documentation of the `predict()` function of the custom class (`src/fasttext_wrapper.py`)
6. Make a prediction of the model

<details>
<summary>
    <font size=\"3\" color=\"darkgreen\"><b>Click to see the command </b></font>
</summary>

```python
list_libs = ["vendeur d'huitres", "boulanger"]

test_data = {
    "query": list_libs,
    "k": 1
}
model.predict(test_data)
```

</details>


4. Make sure that the two following descriptions give the same results: `"COIFFEUR"` and `"coiffeur, & 98789"`
5. Change the value of the parameter `k`
::::
:::

